// Generated by view binder compiler. Do not edit!
package com.example.qctestingapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.example.qctestingapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PrintItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnCancel;

  @NonNull
  public final Button btnPrint;

  @NonNull
  public final ImageView imgQrCode;

  @NonNull
  public final LinearLayout layoutPrint;

  @NonNull
  public final RecyclerView recyclerViewPrint;

  @NonNull
  public final TextView txtFuelType;

  @NonNull
  public final TextView txtHoseClipPrint;

  @NonNull
  public final TextView txtModelColor;

  @NonNull
  public final TextView txtPrintTime;

  @NonNull
  public final TextView txtResultPrint;

  @NonNull
  public final TextView txtSubQr1;

  @NonNull
  public final TextView txtSubQr2;

  private PrintItemBinding(@NonNull LinearLayout rootView, @NonNull Button btnCancel,
      @NonNull Button btnPrint, @NonNull ImageView imgQrCode, @NonNull LinearLayout layoutPrint,
      @NonNull RecyclerView recyclerViewPrint, @NonNull TextView txtFuelType,
      @NonNull TextView txtHoseClipPrint, @NonNull TextView txtModelColor,
      @NonNull TextView txtPrintTime, @NonNull TextView txtResultPrint, @NonNull TextView txtSubQr1,
      @NonNull TextView txtSubQr2) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnPrint = btnPrint;
    this.imgQrCode = imgQrCode;
    this.layoutPrint = layoutPrint;
    this.recyclerViewPrint = recyclerViewPrint;
    this.txtFuelType = txtFuelType;
    this.txtHoseClipPrint = txtHoseClipPrint;
    this.txtModelColor = txtModelColor;
    this.txtPrintTime = txtPrintTime;
    this.txtResultPrint = txtResultPrint;
    this.txtSubQr1 = txtSubQr1;
    this.txtSubQr2 = txtSubQr2;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PrintItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PrintItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.print_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PrintItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_cancel;
      Button btnCancel = rootView.findViewById(id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btn_print;
      Button btnPrint = rootView.findViewById(id);
      if (btnPrint == null) {
        break missingId;
      }

      id = R.id.img_qr_code;
      ImageView imgQrCode = rootView.findViewById(id);
      if (imgQrCode == null) {
        break missingId;
      }

      id = R.id.layout_print;
      LinearLayout layoutPrint = rootView.findViewById(id);
      if (layoutPrint == null) {
        break missingId;
      }

      id = R.id.recycler_view_print;
      RecyclerView recyclerViewPrint = rootView.findViewById(id);
      if (recyclerViewPrint == null) {
        break missingId;
      }

      id = R.id.txt_fuel_type;
      TextView txtFuelType = rootView.findViewById(id);
      if (txtFuelType == null) {
        break missingId;
      }

      id = R.id.txt_hose_clip_print;
      TextView txtHoseClipPrint = rootView.findViewById(id);
      if (txtHoseClipPrint == null) {
        break missingId;
      }

      id = R.id.txt_model_color;
      TextView txtModelColor = rootView.findViewById(id);
      if (txtModelColor == null) {
        break missingId;
      }

      id = R.id.txt_print_time;
      TextView txtPrintTime = rootView.findViewById(id);
      if (txtPrintTime == null) {
        break missingId;
      }

      id = R.id.txt_result_print;
      TextView txtResultPrint = rootView.findViewById(id);
      if (txtResultPrint == null) {
        break missingId;
      }

      id = R.id.txt_sub_qr1;
      TextView txtSubQr1 = rootView.findViewById(id);
      if (txtSubQr1 == null) {
        break missingId;
      }

      id = R.id.txt_sub_qr2;
      TextView txtSubQr2 = rootView.findViewById(id);
      if (txtSubQr2 == null) {
        break missingId;
      }

      return new PrintItemBinding((LinearLayout) rootView, btnCancel, btnPrint, imgQrCode,
          layoutPrint, recyclerViewPrint, txtFuelType, txtHoseClipPrint, txtModelColor,
          txtPrintTime, txtResultPrint, txtSubQr1, txtSubQr2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
