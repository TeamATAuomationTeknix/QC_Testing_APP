// Generated by view binder compiler. Do not edit!
package com.example.qctestingapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.qctestingapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class QuestionsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnNotOk;

  @NonNull
  public final Button btnOk;

  @NonNull
  public final LinearLayout questions;

  @NonNull
  public final TextView txtQNo;

  @NonNull
  public final TextView txtQuestion;

  private QuestionsBinding(@NonNull LinearLayout rootView, @NonNull Button btnNotOk,
      @NonNull Button btnOk, @NonNull LinearLayout questions, @NonNull TextView txtQNo,
      @NonNull TextView txtQuestion) {
    this.rootView = rootView;
    this.btnNotOk = btnNotOk;
    this.btnOk = btnOk;
    this.questions = questions;
    this.txtQNo = txtQNo;
    this.txtQuestion = txtQuestion;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static QuestionsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static QuestionsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.questions, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static QuestionsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnNotOk;
      Button btnNotOk = rootView.findViewById(id);
      if (btnNotOk == null) {
        break missingId;
      }

      id = R.id.btnOk;
      Button btnOk = rootView.findViewById(id);
      if (btnOk == null) {
        break missingId;
      }

      LinearLayout questions = (LinearLayout) rootView;

      id = R.id.txtQNo;
      TextView txtQNo = rootView.findViewById(id);
      if (txtQNo == null) {
        break missingId;
      }

      id = R.id.txtQuestion;
      TextView txtQuestion = rootView.findViewById(id);
      if (txtQuestion == null) {
        break missingId;
      }

      return new QuestionsBinding((LinearLayout) rootView, btnNotOk, btnOk, questions, txtQNo,
          txtQuestion);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
